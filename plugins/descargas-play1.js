// Importa las librer√≠as necesarias
import fetch from "node-fetch";
import { ogmp3 } from '../lib/youtubedl.js';
import yts from "yt-search";
import axios from 'axios';
import crypto from 'crypto';
import path from 'path';
import os from 'os';
import fs from 'fs';

// La clave se env√≠a como un hash SHA256
const NEVI_API_KEY = 'ellen';
const NEVI_API_KEY_SHA256 = crypto.createHash('sha256').update(NEVI_API_KEY).digest('hex');

const SIZE_LIMIT_MB = 100;
const MIN_AUDIO_SIZE_BYTES = 50000;
const newsletterJid = '120363418071540900@newsletter';
const newsletterName = '‚∏ô‡†≠Ãª÷∞Í™Üü¶à ùêÑllen ùêâ·¥è·¥á ñ•î S·•±rvice';

const handler = async (m, { conn, args, usedPrefix, command }) => {
  const name = conn.getName(m.sender);
  args = args.filter(v => v?.trim());

  const contextInfo = {
    mentionedJid: [m.sender],
    isForwarded: true,
    forwardingScore: 999,
    forwardedNewsletterMessageInfo: {
      newsletterJid,
      newsletterName,
      serverMessageId: -1
    },
    externalAdReply: {
      title: 'üñ§ ‚è§ÕüÕüÕûÕûùôÄùôáùôáùôÄùôâ - ùòΩùôäùôè ·®∂·Çí·©ö',
      body: `‚ú¶ ùôÄùô®ùô•ùôöùôßùôñùô£ùôôùô§ ùô©ùô™ ùô®ùô§ùô°ùôûùôòùôûùô©ùô™ùôô, ${name}. ‚ô°~Ÿ©( ÀÉ‚ñΩÀÇ )€∂~‚ô°`,
      thumbnail: icons, // Asume que 'icons' est√° definido en otro lugar
      sourceUrl: redes, // Asume que 'redes' est√° definido en otro lugar
      mediaType: 1,
      renderLargerThumbnail: false
    }
  };

  if (!args[0]) {
    return conn.reply(m.chat, `ü¶à *¬ø·•é—ñ·•í—ñsùóç·•± ·•≤ ‚ç¥·•±·É´—ñrm·•± ·•≤·•£g·•Ü s—ñ·•í s·•≤·ë≤·•±r ùóä·•ô·•±ÃÅ?*
·É´—ñ ·•£·•Ü ùóä·•ô·•± ùóä·•ô—ñ·•±r·•±s... ·•Ü ·•é·•±ùóç·•±.

üéß ·•±»∑·•±m‚ç¥·•£·•Ü:
${usedPrefix}play moonlight - kali uchis`, m, { contextInfo });
  }

  const isMode = ["audio", "video"].includes(args[0].toLowerCase());
  const queryOrUrl = isMode ? args.slice(1).join(" ") : args.join(" ");
  const isInputUrl = /^(https?:\/\/)?(www\.)?(m\.)?(youtube\.com|youtu\.be)\/.+$/i.test(queryOrUrl);

  let video;

  if (isMode && isInputUrl) {
    video = { url: queryOrUrl };
    await m.react("üì•");

    const mode = args[0].toLowerCase();

    // Funci√≥n principal para manejar la descarga de la API de NEVI
    const handleNeviApiDownload = async () => {
      // 1. Obtener los metadatos de YouTube para el t√≠tulo y otros datos
      let videoInfo;
      try {
        videoInfo = await yts.getInfo(queryOrUrl);
      } catch (e) {
        console.error("Error al obtener info de la URL:", e);
        videoInfo = { title: 'Archivo de YouTube' };
      }
      
      // 2. Hacer la petici√≥n a la API de NEVI para generar el archivo
      const neviApiUrl = `http://neviapi.ddns.net:8000/youtube`;
      const format = mode === "audio" ? "mp3" : "mp4";
      const neviHeaders = { 'Content-Type': 'application/json', 'X-Auth-Sha256': NEVI_API_KEY_SHA256 };

      const res = await fetch(neviApiUrl, {
        method: 'POST',
        headers: neviHeaders,
        body: JSON.stringify({ url: queryOrUrl, format: format }),
      });

      // --- Secci√≥n de depuraci√≥n de la respuesta de la API ---
      console.log('--- Respuesta de la API de NEVI ---');
      console.log('Status:', res.status);
      console.log('Status Text:', res.statusText);
      const json = await res.json();
      console.log('Body:', json);
      console.log('------------------------------------');
      // --- Fin de la secci√≥n de depuraci√≥n ---

      if (!res.ok || !json.ok || !json.download_url) {
        throw new Error(`NEVI API... derrumbada. Estado: ${json.ok ? 'OK, pero sin URL de descarga' : 'Fallido'}`);
      }
      
      const fileId = json.id;
      const downloadUrl = `http://neviapi.ddns.net:8000${json.download_url}`;
      const title = json.info.title || videoInfo.title;

      // 3. Petici√≥n HEAD para obtener el tama√±o del archivo
      let fileSizeMb;
      try {
        const headResponse = await axios.head(downloadUrl, { headers: neviHeaders });
        const contentLength = headResponse.headers['content-length'];
        fileSizeMb = contentLength / (1024 * 1024);
      } catch (headError) {
        console.error("Error en la petici√≥n HEAD:", headError);
        throw new Error("No se pudo obtener el tama√±o del archivo. Intentando con la l√≥gica de respaldo.");
      }

      const isAudio = mode === 'audio';
      const mediaMimetype = isAudio ? 'audio/mpeg' : 'video/mp4';
      const fileName = `${title}.${isAudio ? 'mp3' : 'mp4'}`;
      
      // 4. Petici√≥n GET para descargar el archivo
      const mediaOptions = {
        quoted: m,
        headers: neviHeaders
      };

      if (fileSizeMb > SIZE_LIMIT_MB) {
        // Enviar como documento si es demasiado grande
        mediaOptions.document = { url: downloadUrl };
        mediaOptions.fileName = fileName;
        mediaOptions.mimetype = mediaMimetype;
        mediaOptions.caption = `‚ö†Ô∏è *El archivo es muy grande (${fileSizeMb.toFixed(2)} MB), lo env√≠o como documento. Puede tardar m√°s en descargar.*
üñ§ *T√≠tulo:* ${title}`;
        await conn.sendMessage(m.chat, mediaOptions);
        await m.react("üìÑ");
      } else {
        // Enviar como audio o video
        if (isAudio) {
          mediaOptions.audio = { url: downloadUrl };
          mediaOptions.mimetype = mediaMimetype;
          mediaOptions.fileName = fileName;
        } else {
          mediaOptions.video = { url: downloadUrl };
          mediaOptions.caption = `üé¨ *Listo.* üñ§ *T√≠tulo:* ${title}`;
          mediaOptions.fileName = fileName;
          mediaOptions.mimetype = mediaMimetype;
        }
        await conn.sendMessage(m.chat, mediaOptions);
        await m.react(isAudio ? "üéß" : "üìΩÔ∏è");
      }
      
      // 5. Notificar al servidor que la descarga ha terminado
      try {
        await axios.post(`http://neviapi.ddns.net:8000/done/${fileId}`, {}, { headers: neviHeaders });
      } catch (doneError) {
        console.error("Error al notificar la descarga al servidor:", doneError);
      }
    };
    
    // Ejecutar la l√≥gica de la API de NEVI con un fallback
    try {
      await handleNeviApiDownload();
      return;
    } catch (apiError) {
      console.error("Fallo con la API de NEVI, recurriendo a la l√≥gica de respaldo:", apiError);
      await conn.reply(m.chat, `‚ö†Ô∏è *¬°Error de Debug!*
*NEVI API fall√≥.* Raz√≥n: ${apiError.message}`, m);

      // --- L√≥gica de respaldo con ogmp3 ---
      try {
        const tmpDir = path.join(process.cwd(), './tmp');
        if (!fs.existsSync(tmpDir)) {
          fs.mkdirSync(tmpDir, { recursive: true });
        }
        const tempFilePath = path.join(tmpDir, `${Date.now()}_${mode === 'audio' ? 'audio' : 'video'}.tmp`);
        
        await m.react("üîÉ"); 
        const downloadResult = await ogmp3.download(queryOrUrl, tempFilePath, mode);
        
        if (downloadResult.status && fs.existsSync(tempFilePath)) {
          const stats = fs.statSync(tempFilePath);
          const fileSizeMb = stats.size / (1024 * 1024);
          
          let mediaOptions;
          const fileBuffer = fs.readFileSync(tempFilePath);

          if (fileSizeMb > SIZE_LIMIT_MB) {
              mediaOptions = {
                  document: fileBuffer,
                  fileName: `${downloadResult.result.title}.${mode === 'audio' ? 'mp3' : 'mp4'}`,
                  mimetype: mode === 'audio' ? 'audio/mpeg' : 'video/mp4',
                  caption: `‚ö†Ô∏è *El archivo es muy grande (${fileSizeMb.toFixed(2)} MB), lo env√≠o como documento. Puede tardar m√°s en descargar.*
üñ§ *T√≠tulo:* ${downloadResult.result.title}`
              };
              await m.react("üìÑ");
          } else {
              mediaOptions = mode === 'audio'
                  ? { audio: fileBuffer, mimetype: 'audio/mpeg', fileName: `${downloadResult.result.title}.mp3` }
                  : { video: fileBuffer, caption: `üé¨ *Listo.* üñ§ *T√≠tulo:* ${downloadResult.result.title}`, fileName: `${downloadResult.result.title}.mp4`, mimetype: 'video/mp4' };
              await m.react(mode === 'audio' ? "üéß" : "üìΩÔ∏è");
          }

          await conn.sendMessage(m.chat, mediaOptions, { quoted: m });
          fs.unlinkSync(tempFilePath);
          return;
        }
        throw new Error("ogmp3 no pudo descargar el archivo.");

      } catch (e2) {
        console.error("Error con ogmp3:", e2);
        
        const tempFilePath = path.join(process.cwd(), './tmp', `${Date.now()}_${mode === 'audio' ? 'audio' : 'video'}.tmp`);
        if (fs.existsSync(tempFilePath)) {
            fs.unlinkSync(tempFilePath);
        }
        
        await conn.reply(m.chat, `‚ö†Ô∏è *¬°Error de Debug!*
*ogmp3 fall√≥.* Raz√≥n: ${e2.message}`, m);

        await conn.reply(m.chat, `üíî *fall√©. pero t√∫ m√°s.*
no pude traerte nada.`, m);
        await m.react("‚ùå");
      }
    }
    return;
  }

  // --- L√≥gica para la b√∫squeda de video (si no hay modo especificado) ---
  if (isInputUrl) {
    try {
      const info = await yts.getInfo(queryOrUrl);
      video = {
        title: info.title,
        timestamp: info.timestamp,
        views: info.views,
        author: { name: info.author.name },
        ago: info.ago,
        url: info.url,
        thumbnail: info.thumbnail
      };
    } catch (e) {
      console.error("Error al obtener info de la URL:", e);
      return conn.reply(m.chat, `üíî *Fall√© al procesar la URL.*
Aseg√∫rate de que sea una URL de YouTube v√°lida.`, m, { contextInfo });
    }
  } else {
    try {
      const searchResult = await yts(queryOrUrl);
      video = searchResult.videos?.[0];
    } catch (e) {
      console.error("Error durante la b√∫squeda en Youtube:", e);
      return conn.reply(m.chat, `üñ§ *qu√© pat√©tico...*
no logr√© encontrar nada con lo que pediste`, m, { contextInfo });
    }
  }

  if (!video) {
    return conn.reply(m.chat, `ü¶à *esta cosa muri√≥ antes de empezar.*
nada encontrado con "${queryOrUrl}"`, m, { contextInfo });
  }

  const buttons = [
    { buttonId: `${usedPrefix}play audio ${video.url}`, buttonText: { displayText: 'üéß ùòºùôêùòøùôÑùôä' }, type: 1 },
    { buttonId: `${usedPrefix}play video ${video.url}`, buttonText: { displayText: 'üé¨ ùôëùôÑùòøùôÄùôä' }, type: 1 }
  ];

  const caption = `
‚îà·∑ºÃà€™€™€™€™€™€™€™€™Ÿú‚îÄ·∑º‡£™€™€™€™€™Ÿú‚îà·∑º›ä€™€™€™€™€™€™€™€™Ÿú‚Åî◊Ñ◊Ö‡£™÷º·Æ´Ã´Ô∏µÕ°‡£™◊Ö◊Ö€™€™€™€™◊Ö‡£™÷º‡πã·Æ´‚åíüåÄîó®Ã§Ã§Ã§€´€´€´Ÿú‚É™“à“à“à“à“â“â·∑í·∞∞Í§¨€´€´€´îó®Ã§Ã§Ã§êáΩ‚îÄ·∑º€™€™€™€™Ÿú‚îà·∑ºÃà€™€™€™€™€™€™€™€™Ÿú‚îÄ·∑º‡£™€™€™€™€™Ÿú‚îà·∑º›ä€™€™€™€™
‚Çä‚ÄßÍí∞ üéßÍí± ùôÄùôáùôáùôÄùôâ ùôÖùôäùôÄ ùòΩùôäùôè ‚Äî ùôãùôáùòºùôî ùôàùôäùòøùôÄ ‚úßÀñ¬∞
Ô∏∂÷ü·çù·∞≥‡°õ€™€™€™€™€™‚èùÃ£ ÕùÕú €´€´€´€´€´€´Ô∏∂   Ô∏∂÷ü·çù·∞≥‡°õ€™€™€™€™€™‚èùÃ£ ÕùÕú €´€´€´€´€´€´Ô∏∂   Ô∏∂÷ü·çù·∞≥‡°õ€™€™€™€™€™‚èùÃ£ ÕùÕú €´€´€´€´€´€´Ô∏∂

> ‡´¢‚ÉòÍí∞üéß‚Éù÷ü·çùÔ∏©ê¥≤‚≥ã·©ß·™≤ *T√≠tulo:* ${video.title}
> ‡´¢‚ÉòÍí∞‚è±Ô∏è‚Éù÷ü·çùÔ∏©ê¥≤‚≥ã·©ß·™≤ *Duraci√≥n:* ${video.timestamp}
> ‡´¢‚ÉòÍí∞üëÄ‚Éù÷ü·çùÔ∏©ê¥≤‚≥ã·©ß·™≤ *Vistas:* ${video.views.toLocaleString()}
> ‡´¢‚ÉòÍí∞üë§‚Éù÷ü·çùÔ∏©ê¥≤‚≥ã·©ß·™≤ *Subido por:* ${video.author.name}
> ‡´¢‚ÉòÍí∞üìÖ‚Éù÷ü·çùÔ∏©ê¥≤‚≥ã·©ß·™≤ *Hace:* ${video.ago}
> ‡´¢‚ÉòÍí∞üîó‚Éù÷ü·çùÔ∏©ê¥≤‚≥ã·©ß·™≤ *URL:* ${video.url}
‚å£÷∂‡£™‡∏∏·∑≠·Æ´‚å£·™≤„Ä´Íí°·≥ù€™Ô∏∂‡ªãùÜ¨‡£™‡£™ùÜ¨‡£™„Ä≠„Ä´‡£≠·Æ´Íí°‡£™÷∂„Ä™ ◊Ö€´‡ØÜ·™≤·Æ´‡£™‚É®„Ä´„Ä™„Ä´ÀöÃ•◊Ö‡©≠÷ü÷∂‡ßé‡ªãùÜ¨◊Ö·Æ´Ã£  ÷¢÷ºÃä‡£™‚°†·Æ´ ‡ªãü¶à·∑≠„Ä´„Ä™„Ä´„Ä™‡∫∏·Æ´ ‡£™›Ñ‚¢ÑÍ†ã÷¢÷º ‡£™ ◊Ö÷∂‡©≠Ã£÷ü÷∂‡ßé·Æ´ÀöÃ•‡£™‡ØÜ·™≤‚É®„Ä´„Ä™„Ä™·Æ´ ‡£™Íí°‡£™ùÜ¨‡£™‡ªã„Ä≠·Æ´Ô∏∂·≥ù€™„Ä™Í†ã÷ºÍí°◊Ö‚å£‡£™÷∂·™≤·Æ´‚å£‡∫∏÷©·∑≠„Ä´·Æ´·≥ù
     Õù·∑º ·Æ´‡ªã‚èù◊Ö„Ä™ùÜ¨‡ªã·Æ´„Ä´‚å£·∑º·∑º·∑º·∑º·∑º·∑º·∑º·∑º·∑º◊ÑùÜ¨‚å£·∑ëÔ∏∂Õ°·∑º·Æ´Ô∏∂◊Ö ‡ªãùÜ¨‚ã∞·©†„Ä´ ◊Ñ·Æ´ ◊ÖùÜ¨ ‚†∏◊Ñ·Æ´ ◊Ö ‚ã±„Ä´ ◊Ñ·∑ë€™€™ùÜ¨Ô∏∂Õ°·∑º·Æ´‡ªãÔ∏∂◊Ö ùÜ¨‚å£·∑º·∑º·∑º·∑º·∑º·∑º·∑º·∑º·∑º◊Ñ·Æ´·∑ë„Ä´‚å£◊Ñ·úî·Æ´‚èù◊Ö‡πã·úî„Ä´·Æ´‡ªã„Ä™ Õù·∑º`;

  await conn.sendMessage(m.chat, {
    image: { url: video.thumbnail },
    caption,
    footer: 'Dime c√≥mo lo quieres... o no digas nada ‚îê(Ôø£„ÉºÔø£)‚îå.',
    buttons,
    headerType: 4,
    contextInfo
  }, { quoted: m });
};

handler.help = ['play'].map(v => v + ' <b√∫squeda o URL>');
handler.tags = ['descargas'];
handler.command = ['play'];
handler.register = true;
handler.prefix = /^[./#]/;

export default handler;
